@page
@model Senparc.Xncf.FileManager.Areas.FileManager.Pages.Index
@{
    ViewData["Title"] = "FileManager 首页";
    Layout = "_Layout_Vue";
}

@section breadcrumbs{
    <el-breadcrumb-item>扩展模块</el-breadcrumb-item>
    <el-breadcrumb-item>文件管理</el-breadcrumb-item>
    <el-breadcrumb-item>首页</el-breadcrumb-item>
}

<div>
    <div class="filter-container">
        <el-button type="primary" icon="el-icon-upload" size="small" @@click="showUploadDialog">上传文件</el-button>
    </div>

    <el-table :data="tableData" v-loading="tableLoading" border>
        <el-table-column prop="fileName" label="文件名" width="auto"></el-table-column>
        <el-table-column prop="fileSize" label="大小" width="120">
            <template slot-scope="scope">
                {{ formatFileSize(scope.row.fileSize) }}
            </template>
        </el-table-column>
        <el-table-column prop="fileType" label="类型" width="100">
            <template slot-scope="scope">
                <span v-if="scope.row.fileType===1">文本</span>
                <span v-else-if="scope.row.fileType===2">Word</span>
                <span v-else-if="scope.row.fileType===3">PowerPoint</span>
                <span v-else-if="scope.row.fileType===4">Excel</span>
                <span v-else-if="scope.row.fileType===5">代码</span>
                <span v-else>其他</span>
            </template>
        </el-table-column>
        <el-table-column prop="description" label="备注" width="auto">
            <template slot-scope="scope">
                <el-input v-model="scope.row.description" 
                         @@blur="handleNoteChange(scope.row)"
                         size="small">
                </el-input>
            </template>
        </el-table-column>
        <el-table-column prop="uploadTime" label="上传时间" width="180">
            <template slot-scope="scope">
                {{ dateFormatter(scope.row.uploadTime) }}
            </template>
        </el-table-column>
        <el-table-column label="操作" width="200">
            <template slot-scope="scope">
                <el-button type="primary" size="mini" @@click="downloadFile(scope.row)">下载</el-button>
                <el-button type="danger" size="mini" @@click="deleteFile(scope.row)">删除</el-button>
            </template>
        </el-table-column>
    </el-table>

    <div class="pagination-container">
        <el-pagination
            @@current-change="handleCurrentChange"
            @@size-change="handleSizeChange"
            :current-page="page.page"
            :page-sizes="[10, 20, 30, 40]"
            :page-size="page.size"
            layout="sizes, prev, pager, next"
            :total="total">
        </el-pagination>
    </div>

    <!-- 添加上传对话框 -->
    <el-dialog title="上传文件" :visible.sync="uploadDialog.visible" width="500px">
        <el-upload
            class="upload-demo"
            ref="upload"
            action="#"
            :auto-upload="false"
            :multiple="true"
            :show-file-list="true"
            :on-success="handleUploadSuccess"
            :on-error="handleUploadError"
            :on-change="handleFileChange"
            :on-progress="handleProgress"
            :before-upload="beforeUpload"
            :file-list="uploadDialog.fileList"
            >
            <el-button slot="trigger" size="small" type="primary">选择文件</el-button>
            <div slot="tip" class="el-upload__tip">可以选择多个文件同时上传</div>
        </el-upload>
        
        <div v-for="(file, index) in uploadDialog.fileList" :key="file.uid" style="margin-top: 10px;">
            <el-input
                v-model="file.description"
                :placeholder="'请输入' + file.name + '的备注'"
                size="small">
                <template slot="prepend">{{file.name}}</template>
            </el-input>
        </div>

        <span slot="footer" class="dialog-footer">
            <el-button @@click="cancelUpload">取 消</el-button>
            <el-button type="primary" @@click="submitUpload" :loading="uploadDialog.uploading">确 定</el-button>
        </span>
    </el-dialog>
</div>

@section scripts{
    <script>
        new Vue({
            el: "#app",
            data() {
                return {
                    tableData: [],
                    tableLoading: false,
                    page: {
                        page: 1,
                        size: 10
                    },
                    total: 0,
                    uploadDialog: {
                        visible: false,
                        fileList: [],
                        uploading: false
                    }
                }
            },
            created() {
                this.getList()
            },
            methods: {
                dateFormatter(date) {
                    return new Date(date).toLocaleString()
                },
                formatFileSize(size) {
                    const units = ['B', 'KB', 'MB', 'GB']
                    let index = 0
                    while (size >= 1024 && index < units.length - 1) {
                        size /= 1024
                        index++
                    }
                    return `${size.toFixed(2)} ${units[index]}`
                },
                async getList() {
                    this.tableLoading = true
                    try {
                        const res = await axios.get(`/Admin/FileManager/Index?handler=List&page=${this.page.page}&pageSize=${this.page.size}`)
                        this.tableData = res.data.data
                        this.total = res.data.data.totalCount
                    } finally {
                        this.tableLoading = false
                    }
                },
                handleCurrentChange(val) {
                    this.page.page = val
                    this.getList()
                },
                handleSizeChange(val) {
                    this.page.size = val
                    this.getList()
                },
                handleUploadSuccess(response, file, fileList) {
                    // 由于我们使用手动上传，这个方法可以留空
                },
                handleUploadError(err, file, fileList) {
                    this.$message.error('上传失败：' + err.message);
                },
                async handleNoteChange(row) {
                    try {
                        await axios.post('/Admin/FileManager/Index?handler=EditNote', {
                            id: row.id,
                            note: row.description
                        })
                        this.$message.success('更新成功')
                    } catch {
                        this.$message.error('更新失败')
                    }
                },
                async deleteFile(row) {
                    try {
                        await this.$confirm('确认删除该文件?', '提示', {
                            type: 'warning'
                        })
                        await axios.post('/Admin/FileManager/Index?handler=Delete', {
                            id: row.id
                        })
                        this.$message.success('删除成功')
                        this.getList()
                    } catch {
                        this.$message.error('删除失败')
                    }
                },
                downloadFile(row) {
                    window.open(`/Admin/FileManager/Index?handler=Download&id=${row.id}`)
                },
                showUploadDialog() {
                    this.uploadDialog.visible = true;
                    this.uploadDialog.fileList = [];
                },
                handleFileChange(file, fileList) {
                    // 为每个文件添加描述字段
                    if (!file.description) {
                        this.$set(file, 'description', '');
                    }
                    this.uploadDialog.fileList = fileList;
                },
                handleProgress(){

                },
                beforeUpload(file) {
                    // 返回 false 阻止自动上传，改为手动上传
                    return false;
                },
                async submitUpload() {
                    console.log("@Model.UpFileUrl")
                    if (this.uploadDialog.fileList.length === 0) {
                        this.$message.warning('请选择要上传的文件');
                        return;
                    }

                    this.uploadDialog.uploading = true;
                    try {
                        const formData = new FormData();
                        this.uploadDialog.fileList.forEach((file, index) => {
                            formData.append('files', file.raw);
                            formData.append('descriptions', file.description || '');
                        });

                        const response = await axios.post("@Model.UpFileUrl", 
                            formData,
                            {
                                headers: {
                                    'Content-Type': 'multipart/form-data'
                                }
                            }
                        )

                        this.$message.success('上传成功');
                        this.uploadDialog.visible = false;
                        this.getList();
                    } catch (error) {
                        this.$message.error('上传失败：' + error.message);
                    } finally {
                        this.uploadDialog.uploading = false;
                    }
                },
                cancelUpload() {
                    this.uploadDialog.visible = false;
                }
            }
        })
    </script>
}
