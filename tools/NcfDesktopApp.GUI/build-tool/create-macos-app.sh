#!/bin/bash

# ====================================
# NCF Ê°åÈù¢Â∫îÁî® macOS Â∫îÁî®Á®ãÂ∫èÂåÖÁîüÊàêÂ∑•ÂÖ∑
# ====================================

set -e  # ÈÅáÂà∞ÈîôËØØÊó∂ÂÅúÊ≠¢

# È¢úËâ≤ÂÆö‰πâ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ÈÖçÁΩÆ
PROJECT_NAME="NcfDesktopApp.GUI"
SOLUTION_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
PUBLISH_DIR="${SOLUTION_DIR}/publish"
OUTPUT_DIR="${SOLUTION_DIR}/macos-app"
BUILD_CONFIG="Release"

# Â∫îÁî®Á®ãÂ∫è‰ø°ÊÅØ
APP_NAME="NCF Desktop"
APP_BUNDLE_ID="com.senparc.ncf.desktop"
APP_VERSION="1.0.0"
APP_COPYRIGHT="¬© 2025 Senparc NCF"
APP_DESCRIPTION="NCF Desktop Application"

# ÂáΩÊï∞ÔºöÊòæÁ§∫Â∏ÆÂä©‰ø°ÊÅØ
show_help() {
    echo -e "${BLUE}Áî®Ê≥ï: $0 [ÈÄâÈ°π]${NC}"
    echo ""
    echo "ÈÄâÈ°π:"
    echo "  -h, --help              ÊòæÁ§∫Ê≠§Â∏ÆÂä©‰ø°ÊÅØ"
    echo "  -c, --clean             Ê∏ÖÁêÜËæìÂá∫ÁõÆÂΩï"
    echo "  --create-dmg            ÂàõÂª∫ DMG ÂÆâË£ÖÂåÖ"
    echo "  --sign                  ÂØπÂ∫îÁî®Á®ãÂ∫èËøõË°å‰ª£Á†ÅÁ≠æÂêç"
    echo "  --notarize              ÂÖ¨ËØÅÂ∫îÁî®Á®ãÂ∫è (ÈúÄË¶ÅAppleÂºÄÂèëËÄÖË¥¶Âè∑)"
    echo "  --identity IDENTITY     ÊåáÂÆö‰ª£Á†ÅÁ≠æÂêçË∫´‰ªΩ"
    echo ""
    echo "Á§∫‰æã:"
    echo "  $0                      # ÂàõÂª∫Âü∫Êú¨ÁöÑ .app ÂåÖ"
    echo "  $0 --create-dmg         # ÂàõÂª∫ .app ÂåÖÂπ∂ÁîüÊàê DMG"
    echo "  $0 --sign              # ÂàõÂª∫Âπ∂Á≠æÂêç .app ÂåÖ"
    echo "  $0 --create-dmg --sign  # ÂàõÂª∫Á≠æÂêçÁöÑ .app ÂåÖÂíå DMG"
    echo ""
    echo -e "${YELLOW}Ê≥®ÊÑè: Ê≠§Â∑•ÂÖ∑ÈúÄË¶ÅÂÖàËøêË°åËá™ÂåÖÂê´ÂèëÂ∏ÉËÑöÊú¨ÁîüÊàê macOS ÂèØÊâßË°åÊñá‰ª∂${NC}"
}

# ÂáΩÊï∞ÔºöÊòæÁ§∫Ê®™ÂπÖ
show_banner() {
    echo -e "${BLUE}"
    echo "=================================================="
    echo "   NCF Ê°åÈù¢Â∫îÁî® macOS Â∫îÁî®Á®ãÂ∫èÂåÖÁîüÊàêÂ∑•ÂÖ∑"
    echo "=================================================="
    echo -e "${NC}"
    echo "È°πÁõÆ: $PROJECT_NAME"
    echo "Â∫îÁî®ÂêçÁß∞: $APP_NAME"
    echo "Bundle ID: $APP_BUNDLE_ID"
    echo "ÁâàÊú¨: $APP_VERSION"
    echo "ËæìÂá∫ÁõÆÂΩï: $OUTPUT_DIR"
    echo ""
}

# ÂáΩÊï∞ÔºöÊ∏ÖÁêÜËæìÂá∫ÁõÆÂΩï
clean_output() {
    echo -e "${YELLOW}üßπ Ê∏ÖÁêÜËæìÂá∫ÁõÆÂΩï...${NC}"
    if [ -d "$OUTPUT_DIR" ]; then
        rm -rf "$OUTPUT_DIR"
        echo -e "${GREEN}‚úÖ ËæìÂá∫ÁõÆÂΩïÂ∑≤Ê∏ÖÁêÜ${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  ËæìÂá∫ÁõÆÂΩï‰∏çÂ≠òÂú®ÔºåË∑≥ËøáÊ∏ÖÁêÜ${NC}"
    fi
    echo ""
}

# ÂáΩÊï∞ÔºöÊ£ÄÊü•ÂâçÁΩÆÊù°‰ª∂
check_prerequisites() {
    echo -e "${BLUE}üîç Ê£ÄÊü•ÂâçÁΩÆÊù°‰ª∂...${NC}"
    
    # Ê£ÄÊü•ÊòØÂê¶Âú®macOS‰∏äËøêË°å
    if [[ "$OSTYPE" != "darwin"* ]]; then
        echo -e "${RED}‚ùå Ê≠§ËÑöÊú¨Âè™ËÉΩÂú® macOS Á≥ªÁªü‰∏äËøêË°å${NC}"
        exit 1
    fi
    
    # Ê£ÄÊü•Ëá™ÂåÖÂê´ÂèëÂ∏ÉÊñá‰ª∂ÊòØÂê¶Â≠òÂú®
    local osx_arm64_dir="$PUBLISH_DIR/osx-arm64"
    local osx_x64_dir="$PUBLISH_DIR/osx-x64"
    
    if [ ! -d "$osx_arm64_dir" ] && [ ! -d "$osx_x64_dir" ]; then
        echo -e "${RED}‚ùå Êú™ÊâæÂà∞ macOS ÂèëÂ∏ÉÊñá‰ª∂${NC}"
        echo -e "${YELLOW}ËØ∑ÂÖàËøêË°åËá™ÂåÖÂê´ÂèëÂ∏ÉËÑöÊú¨:${NC}"
        echo -e "${YELLOW}  ./build-tool/build-all-platforms-self-contained.sh -p osx-arm64${NC}"
        echo -e "${YELLOW}  ./build-tool/build-all-platforms-self-contained.sh -p osx-x64${NC}"
        exit 1
    fi
    
    # Ê£ÄÊü•ÂèØÊâßË°åÊñá‰ª∂
    if [ -d "$osx_arm64_dir" ] && [ ! -f "$osx_arm64_dir/$PROJECT_NAME" ]; then
        echo -e "${RED}‚ùå Êú™ÊâæÂà∞ macOS ARM64 ÂèØÊâßË°åÊñá‰ª∂${NC}"
        exit 1
    fi
    
    if [ -d "$osx_x64_dir" ] && [ ! -f "$osx_x64_dir/$PROJECT_NAME" ]; then
        echo -e "${RED}‚ùå Êú™ÊâæÂà∞ macOS x64 ÂèØÊâßË°åÊñá‰ª∂${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ ÂâçÁΩÆÊù°‰ª∂Ê£ÄÊü•ÈÄöËøá${NC}"
    echo ""
}

# ÂáΩÊï∞Ôºö‰ªé PNG/ICO ÁîüÊàê .icns
generate_icns_from_source() {
    local source_image=$1
    local output_icns=$2
    local workdir=$(dirname "$output_icns")/._icon_build
    rm -rf "$workdir" && mkdir -p "$workdir/AppIcon.iconset"

    # Â¶ÇÊûú iconutil Â≠òÂú®ÔºåÊåâËßÑËåÉÁîüÊàê
    if command -v iconutil &> /dev/null && command -v sips &> /dev/null; then
        local iconset="$workdir/AppIcon.iconset"
        sips -z 16 16     "$source_image" --out "$iconset/icon_16x16.png" &>/dev/null || true
        sips -z 32 32     "$source_image" --out "$iconset/icon_16x16@2x.png" &>/dev/null || true
        sips -z 32 32     "$source_image" --out "$iconset/icon_32x32.png" &>/dev/null || true
        sips -z 64 64     "$source_image" --out "$iconset/icon_32x32@2x.png" &>/dev/null || true
        sips -z 128 128   "$source_image" --out "$iconset/icon_128x128.png" &>/dev/null || true
        sips -z 256 256   "$source_image" --out "$iconset/icon_128x128@2x.png" &>/dev/null || true
        sips -z 256 256   "$source_image" --out "$iconset/icon_256x256.png" &>/dev/null || true
        sips -z 512 512   "$source_image" --out "$iconset/icon_256x256@2x.png" &>/dev/null || true
        sips -z 512 512   "$source_image" --out "$iconset/icon_512x512.png" &>/dev/null || true
        sips -z 1024 1024 "$source_image" --out "$iconset/icon_512x512@2x.png" &>/dev/null || true
        iconutil -c icns "$iconset" -o "$output_icns" &>/dev/null || true
    fi

    # ÂõûÈÄÄÊñπÊ°àÔºöÂ∞ùËØï‰ΩøÁî® sips Áõ¥Êé•ËΩ¨Êç¢
    if [ ! -f "$output_icns" ] && command -v sips &> /dev/null; then
        sips -s format icns "$source_image" --out "$output_icns" &>/dev/null || true
    fi

    # ÂÜçÂõûÈÄÄÔºöÂ¶ÇÊûú‰ªçÊú™ÁîüÊàêÔºåÊã∑Ë¥ùÊ∫êÊñá‰ª∂ÔºàÈÉ®ÂàÜÁ≥ªÁªü‰ºöËØÜÂà´ png ‰Ωú‰∏∫ icnsÔºå‰ΩÜ‰∏ç‰øùËØÅÔºâ
    if [ ! -f "$output_icns" ] && [ -f "$source_image" ]; then
        cp -f "$source_image" "$output_icns" 2>/dev/null || true
    fi
}

# Â∞ùËØïÂú®Êú™ÂÆâË£Ö SetFile ÁöÑÊÉÖÂÜµ‰∏ãÔºåÁî® xattr ËÆæÁΩÆËá™ÂÆö‰πâÂõæÊ†áÊ†áÂøó‰Ωç
set_custom_icon_flag() {
    local target_dir=$1
    if ! command -v xattr &> /dev/null; then
        return 1
    fi
    # ËØªÂèñÂΩìÂâç FinderInfoÔºà32 Â≠óËäÇÔºå64 ‰∏™ÂçÅÂÖ≠ËøõÂà∂Â≠óÁ¨¶Ôºâ
    local finfo_hex=$(xattr -px com.apple.FinderInfo "$target_dir" 2>/dev/null | tr -d ' \n')
    if [ -z "$finfo_hex" ] || [ ${#finfo_hex} -lt 64 ]; then
        finfo_hex="0000000000000000000000000000000000000000000000000000000000000000"
    fi
    # flags ‰Ωç‰∫éÁ¨¨ 9-10 ‰∏™Â≠óËäÇÔºà‰ªé 0 ÂºÄÂßãÁöÑÂ≠óËäÇ 8-9ÔºâÔºåÊØèÂ≠óËäÇ 2 ‰Ωç hexÔºåÂõ†Ê≠§Ëµ∑Âßã‰∏ãÊ†á 16ÔºåÈïøÂ∫¶ 4
    local flags_hex=${finfo_hex:16:4}
    # Ëß£Êûê‰∏∫Êï¥Êï∞Âπ∂ÁΩÆ‰∏ä kHasCustomIcon (0x0400)
    local flags=$((16#${flags_hex}))
    flags=$((flags | 0x0400))
    local new_flags_hex=$(printf "%04X" $flags)
    local new_hex="${finfo_hex:0:16}${new_flags_hex}${finfo_hex:20}"
    # ÂÜôÂõû FinderInfoÔºà‰ª•ÂçÅÂÖ≠ËøõÂà∂ÂΩ¢ÂºèÔºâ
    xattr -wx com.apple.FinderInfo "$new_hex" "$target_dir" >/dev/null 2>&1 || true
}

# ÂáΩÊï∞ÔºöÂàõÂª∫Â∫îÁî®Á®ãÂ∫èÂåÖÁªìÊûÑ
create_app_bundle() {
    local arch=$1
    local source_dir="$PUBLISH_DIR/$arch"
    local app_bundle="$OUTPUT_DIR/$APP_NAME-$arch.app"
    
    echo -e "${BLUE}üì¶ ÂàõÂª∫ $arch Â∫îÁî®Á®ãÂ∫èÂåÖ...${NC}"
    
    # ÂàõÂª∫ .app ÁõÆÂΩïÁªìÊûÑ
    mkdir -p "$app_bundle/Contents/MacOS"
    mkdir -p "$app_bundle/Contents/Resources"
    mkdir -p "$app_bundle/Contents/Frameworks"
    
    # Â§çÂà∂ÂèØÊâßË°åÊñá‰ª∂Âíå‰æùËµñ
    echo -e "${YELLOW}  üìã Â§çÂà∂Â∫îÁî®Á®ãÂ∫èÊñá‰ª∂...${NC}"
    cp -R "$source_dir"/* "$app_bundle/Contents/MacOS/"
    
    # ÈáçÂëΩÂêç‰∏ªÂèØÊâßË°åÊñá‰ª∂‰∏∫Â∫îÁî®ÂêçÁß∞
    mv "$app_bundle/Contents/MacOS/$PROJECT_NAME" "$app_bundle/Contents/MacOS/$APP_NAME"
    
    # ÂàõÂª∫ Info.plist
    create_info_plist "$app_bundle" "$arch"
    
    # Â§çÂà∂ÂõæÊ†áÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
    copy_app_icon "$app_bundle"
    
    # ËÆæÁΩÆÂèØÊâßË°åÊùÉÈôê
    chmod +x "$app_bundle/Contents/MacOS/$APP_NAME"
    
    # ÁßªÈô§ÈöîÁ¶ªÂ±ûÊÄßÂπ∂Á≠æÂêçÔºàÂ¶ÇÊûúÈúÄË¶ÅÔºâ
    process_app_bundle "$app_bundle"
    
    echo -e "${GREEN}‚úÖ $arch Â∫îÁî®Á®ãÂ∫èÂåÖÂàõÂª∫ÂÆåÊàê${NC}"
    echo ""
}

# ÂáΩÊï∞ÔºöÂàõÂª∫ Info.plist
create_info_plist() {
    local app_bundle=$1
    local arch=$2
    local plist_file="$app_bundle/Contents/Info.plist"
    
    echo -e "${YELLOW}  üìÑ ÂàõÂª∫ Info.plist...${NC}"
    
    cat > "$plist_file" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleDisplayName</key>
    <string>$APP_NAME</string>
    <key>CFBundleExecutable</key>
    <string>$APP_NAME</string>
    <key>CFBundleIdentifier</key>
    <string>$APP_BUNDLE_ID</string>
    <key>CFBundleInfoDictionaryVersion</key>
    <string>6.0</string>
    <key>CFBundleName</key>
    <string>$APP_NAME</string>
    <key>CFBundlePackageType</key>
    <string>APPL</string>
    <key>CFBundleShortVersionString</key>
    <string>$APP_VERSION</string>
    <key>CFBundleVersion</key>
    <string>$APP_VERSION</string>
    <key>LSMinimumSystemVersion</key>
    <string>10.15</string>
    <key>NSHighResolutionCapable</key>
    <true/>
    <key>NSHumanReadableCopyright</key>
    <string>$APP_COPYRIGHT</string>
    <key>CFBundleIconFile</key>
    <string>AppIcon</string>
    <key>LSApplicationCategoryType</key>
    <string>public.app-category.developer-tools</string>
    <key>NSAppTransportSecurity</key>
    <dict>
        <key>NSAllowsArbitraryLoads</key>
        <true/>
    </dict>
    <key>LSRequiresNativeExecution</key>
    <true/>
</dict>
</plist>
EOF
}

# ÂáΩÊï∞ÔºöÂ§çÂà∂Â∫îÁî®ÂõæÊ†á
copy_app_icon() {
    local app_bundle=$1
    # Prefer Assets/NCF-logo.png, then project root NCF-logo.png. Fallback to legacy Avalonia icon if missing
    local icon_source="$SOLUTION_DIR/Assets/NCF-logo.png"
    if [ ! -f "$icon_source" ]; then
        icon_source="$SOLUTION_DIR/NCF-logo.png"
    fi
    if [ ! -f "$icon_source" ]; then
        icon_source="$SOLUTION_DIR/Assets/avalonia-logo.ico"
    fi
    
    if [ -f "$icon_source" ]; then
        echo -e "${YELLOW}  üé® Â§ÑÁêÜÂ∫îÁî®ÂõæÊ†á...${NC}"
        mkdir -p "$app_bundle/Contents/Resources"
        generate_icns_from_source "$icon_source" "$app_bundle/Contents/Resources/AppIcon.icns"
        if [ -f "$app_bundle/Contents/Resources/AppIcon.icns" ]; then
            echo -e "${GREEN}  ‚úÖ Â∑≤ÁîüÊàê AppIcon.icns${NC}"
        else
            echo -e "${YELLOW}  ‚ö†Ô∏è  ÂõæÊ†áËΩ¨Êç¢Â§±Ë¥•ÔºåÂ∫îÁî®Â∞Ü‰ΩøÁî®ÈªòËÆ§ÂõæÊ†á${NC}"
        fi
    else
        echo -e "${YELLOW}  ‚ö†Ô∏è  Êú™ÊâæÂà∞Â∫îÁî®ÂõæÊ†áÊñá‰ª∂${NC}"
    fi
}

# ÂáΩÊï∞ÔºöÂ§ÑÁêÜÂ∫îÁî®Á®ãÂ∫èÂåÖÔºàÁ≠æÂêçÂíåÊùÉÈôêÔºâ
process_app_bundle() {
    local app_bundle=$1
    
    echo -e "${YELLOW}  üîß Â§ÑÁêÜÂ∫îÁî®Á®ãÂ∫èÂåÖ...${NC}"
    
    # ÈÄíÂΩíÁßªÈô§ÈöîÁ¶ªÂ±ûÊÄß
    find "$app_bundle" -type f -exec xattr -d com.apple.quarantine {} \; 2>/dev/null || true
    
    # Â¶ÇÊûúÈúÄË¶ÅÁ≠æÂêç
    if [ "$SIGN_APP" = true ]; then
        sign_app_bundle "$app_bundle"
    else
        # ÊâßË°å ad-hoc Á≠æÂêç
        codesign --force --deep --sign - "$app_bundle" 2>/dev/null || {
            echo -e "${YELLOW}  ‚ö†Ô∏è  Ad-hoc Á≠æÂêçÂ§±Ë¥•Ôºå‰ΩÜÂ∫îÁî®Á®ãÂ∫è‰ªçÂèØËøêË°å${NC}"
        }
    fi
}

# ÂáΩÊï∞Ôºö‰ª£Á†ÅÁ≠æÂêç
sign_app_bundle() {
    local app_bundle=$1
    
    echo -e "${YELLOW}  ‚úçÔ∏è  ÂØπÂ∫îÁî®Á®ãÂ∫èËøõË°å‰ª£Á†ÅÁ≠æÂêç...${NC}"
    
    if [ -n "$SIGNING_IDENTITY" ]; then
        # ‰ΩøÁî®ÊåáÂÆöÁöÑÁ≠æÂêçË∫´‰ªΩ
        if codesign --force --deep --sign "$SIGNING_IDENTITY" "$app_bundle"; then
            echo -e "${GREEN}  ‚úÖ ‰ª£Á†ÅÁ≠æÂêçÊàêÂäü${NC}"
        else
            echo -e "${RED}  ‚ùå ‰ª£Á†ÅÁ≠æÂêçÂ§±Ë¥•${NC}"
            exit 1
        fi
    else
        # Êü•ÊâæÂèØÁî®ÁöÑÁ≠æÂêçË∫´‰ªΩ
        local identities=$(security find-identity -v -p codesigning | grep "Developer ID Application" | head -1 | cut -d '"' -f 2)
        
        if [ -n "$identities" ]; then
            echo -e "${BLUE}  üîç ÊâæÂà∞Á≠æÂêçË∫´‰ªΩ: $identities${NC}"
            if codesign --force --deep --sign "$identities" "$app_bundle"; then
                echo -e "${GREEN}  ‚úÖ ‰ª£Á†ÅÁ≠æÂêçÊàêÂäü${NC}"
            else
                echo -e "${RED}  ‚ùå ‰ª£Á†ÅÁ≠æÂêçÂ§±Ë¥•${NC}"
                exit 1
            fi
        else
            echo -e "${YELLOW}  ‚ö†Ô∏è  Êú™ÊâæÂà∞ÊúâÊïàÁöÑÁ≠æÂêçË∫´‰ªΩÔºåÊâßË°å ad-hoc Á≠æÂêç${NC}"
            codesign --force --deep --sign - "$app_bundle"
        fi
    fi
}

# ÂáΩÊï∞ÔºöÂàõÂª∫ÈÄöÁî®‰∫åËøõÂà∂Êñá‰ª∂
create_universal_app() {
    local arm64_app="$OUTPUT_DIR/$APP_NAME-osx-arm64.app"
    local x64_app="$OUTPUT_DIR/$APP_NAME-osx-x64.app"
    local universal_app="$OUTPUT_DIR/$APP_NAME-Universal.app"
    
    if [ -d "$arm64_app" ] && [ -d "$x64_app" ]; then
        echo -e "${BLUE}üîÑ ÂàõÂª∫ÈÄöÁî®‰∫åËøõÂà∂Êñá‰ª∂Â∫îÁî®Á®ãÂ∫èÂåÖ...${NC}"
        
        # Â§çÂà∂ ARM64 ÁâàÊú¨‰Ωú‰∏∫Âü∫Á°Ä
        cp -R "$arm64_app" "$universal_app"
        
        # ‰ΩøÁî® lipo ÂàõÂª∫ÈÄöÁî®‰∫åËøõÂà∂Êñá‰ª∂
        lipo -create \
            "$arm64_app/Contents/MacOS/$APP_NAME" \
            "$x64_app/Contents/MacOS/$APP_NAME" \
            -output "$universal_app/Contents/MacOS/$APP_NAME"
        
        # ÈáçÊñ∞Á≠æÂêç
        if [ "$SIGN_APP" = true ]; then
            sign_app_bundle "$universal_app"
        else
            codesign --force --deep --sign - "$universal_app" 2>/dev/null || true
        fi
        
        echo -e "${GREEN}‚úÖ ÈÄöÁî®‰∫åËøõÂà∂Êñá‰ª∂Â∫îÁî®Á®ãÂ∫èÂåÖÂàõÂª∫ÂÆåÊàê${NC}"
        echo ""
    else
        echo -e "${YELLOW}‚ö†Ô∏è  ÈúÄË¶ÅÂêåÊó∂Â≠òÂú® ARM64 Âíå x64 ÁâàÊú¨ÊâçËÉΩÂàõÂª∫ÈÄöÁî®ÂåÖ${NC}"
    fi
}

# ÂáΩÊï∞ÔºöÂàõÂª∫ DMG
create_dmg() {
    echo -e "${BLUE}üíø ÂàõÂª∫ DMG ÂÆâË£ÖÂåÖ...${NC}"
    
    local dmg_temp_dir="$OUTPUT_DIR/dmg-temp"
    local dmg_file="$OUTPUT_DIR/$APP_NAME-$APP_VERSION.dmg"
    
    # Ê∏ÖÁêÜ‰∏¥Êó∂ÁõÆÂΩï
    rm -rf "$dmg_temp_dir"
    mkdir -p "$dmg_temp_dir"
    
    # ÂÜ≥ÂÆö‰ΩøÁî®Âì™‰∏™Â∫îÁî®Á®ãÂ∫èÂåÖ
    local app_to_package=""
    if [ -d "$OUTPUT_DIR/$APP_NAME-Universal.app" ]; then
        app_to_package="$OUTPUT_DIR/$APP_NAME-Universal.app"
        echo -e "${BLUE}  üì¶ ‰ΩøÁî®ÈÄöÁî®‰∫åËøõÂà∂ÁâàÊú¨${NC}"
    elif [ -d "$OUTPUT_DIR/$APP_NAME-osx-arm64.app" ]; then
        app_to_package="$OUTPUT_DIR/$APP_NAME-osx-arm64.app"
        echo -e "${BLUE}  üì¶ ‰ΩøÁî® ARM64 ÁâàÊú¨${NC}"
    elif [ -d "$OUTPUT_DIR/$APP_NAME-osx-x64.app" ]; then
        app_to_package="$OUTPUT_DIR/$APP_NAME-osx-x64.app"
        echo -e "${BLUE}  üì¶ ‰ΩøÁî® x64 ÁâàÊú¨${NC}"
    else
        echo -e "${RED}‚ùå Êú™ÊâæÂà∞ÂèØÁî®ÁöÑÂ∫îÁî®Á®ãÂ∫èÂåÖ${NC}"
        return 1
    fi
    
    # Â§çÂà∂Â∫îÁî®Á®ãÂ∫èÂåÖÂà∞‰∏¥Êó∂ÁõÆÂΩï
    cp -R "$app_to_package" "$dmg_temp_dir/$APP_NAME.app"
    
    # ÂàõÂª∫Â∫îÁî®Á®ãÂ∫èÊñá‰ª∂Â§πÁöÑÁ¨¶Âè∑ÈìæÊé•
    ln -s /Applications "$dmg_temp_dir/Applications"

    # ËÆæÁΩÆÂç∑ÂõæÊ†áÔºà‰Ωø .dmg Êñá‰ª∂ÊòæÁ§∫Ëá™ÂÆö‰πâÂõæÊ†áÔºâ
    # ‰ºòÂÖà‰ΩøÁî®Â∑≤ÁîüÊàêÁöÑ VolumeIcon.icnsÔºåÂ§áÁî® AppIcon.icns
    echo -e "${YELLOW}  üé® ËÆæÁΩÆ DMG Âç∑ÂõæÊ†á...${NC}"
    local volume_icon_source="$SOLUTION_DIR/Assets/VolumeIcon.icns"
    if [ ! -f "$volume_icon_source" ]; then
        volume_icon_source="$SOLUTION_DIR/Assets/AppIcon.icns"
    fi
    
    if [ -f "$volume_icon_source" ]; then
        # Â§çÂà∂ÂõæÊ†áÂà∞‰∏¥Êó∂ÁõÆÂΩï
        cp -f "$volume_icon_source" "$dmg_temp_dir/.VolumeIcon.icns" 2>/dev/null || true
        echo -e "${GREEN}  ‚úÖ Â∑≤ËÆæÁΩÆÂç∑ÂõæÊ†á: $(basename "$volume_icon_source")${NC}"
    else
        echo -e "${YELLOW}  ‚ö†Ô∏è  Êú™ÊâæÂà∞Âç∑ÂõæÊ†áÊñá‰ª∂ÔºåDMG Â∞Ü‰ΩøÁî®ÈªòËÆ§ÂõæÊ†á${NC}"
    fi
    
    # ÂàõÂª∫ .DS_Store Êñá‰ª∂‰ª•ËÆæÁΩÆÁ™óÂè£Â∏ÉÂ±ÄÔºàÂèØÈÄâÔºâ
    create_dmg_layout "$dmg_temp_dir"
    
    # ÂàõÂª∫ DMGÔºàÂÖàÂàõÂª∫ÂèØÂÜô DMGÔºåËÆæÁΩÆÂç∑ÂõæÊ†áÔºåÂÜçÂéãÁº©Ôºâ
    if command -v hdiutil &> /dev/null; then
        echo -e "${YELLOW}  üîÑ ÁîüÊàê DMG Êñá‰ª∂...${NC}"
        local rw_dmg="$dmg_temp_dir/pack-temp.dmg"
        [ -f "$rw_dmg" ] && rm -f "$rw_dmg"
        [ -f "$dmg_file" ] && rm -f "$dmg_file"

        # ÂÖàÂàõÂª∫ÂèØÂÜô DMG
        hdiutil create -srcfolder "$dmg_temp_dir" -volname "$APP_NAME" -fs HFS+ -format UDRW -ov "$rw_dmg" >/dev/null

        # ÊåÇËΩΩËÆæÁΩÆÂç∑ÂõæÊ†á
        local mount_point="$OUTPUT_DIR/_dmg_mount"
        mkdir -p "$mount_point"
        if hdiutil attach -readwrite -noverify -noautoopen -mountpoint "$mount_point" "$rw_dmg" >/dev/null; then
            # Êã∑Ë¥ùÂç∑ÂõæÊ†áÂà∞Ê†πÁõÆÂΩïÔºàÂ∑≤ÂëΩÂêç‰∏∫ .VolumeIcon.icnsÔºâ
            if [ -f "$dmg_temp_dir/.VolumeIcon.icns" ]; then
                cp -f "$dmg_temp_dir/.VolumeIcon.icns" "$mount_point/.VolumeIcon.icns" 2>/dev/null || true
            fi
            # Ê†áËÆ∞Ëá™ÂÆö‰πâÂõæÊ†á
            if command -v SetFile &> /dev/null; then
                SetFile -a C "$mount_point" 2>/dev/null || true
            else
                set_custom_icon_flag "$mount_point" || echo -e "${YELLOW}  ‚ö†Ô∏è  Êú™ÊâæÂà∞ SetFileÔºåÂ∑≤Â∞ùËØï‰ΩøÁî® xattr ËÆæÁΩÆËá™ÂÆö‰πâÂõæÊ†áÊ†áÂøó${NC}"
            fi
            hdiutil detach "$mount_point" -quiet || true
            rmdir "$mount_point" 2>/dev/null || true
        fi

        # ËΩ¨Êç¢‰∏∫ÂéãÁº© DMG
        hdiutil convert "$rw_dmg" -format UDZO -imagekey zlib-level=9 -o "$dmg_file" >/dev/null
        rm -f "$rw_dmg"

        # Ê∏ÖÁêÜ‰∏¥Êó∂ÁõÆÂΩï
        rm -rf "$dmg_temp_dir"
        
        # ‰∏∫ DMG Êñá‰ª∂Êú¨Ë∫´ËÆæÁΩÆÂõæÊ†á
        if [ -f "$dmg_file" ] && [ -f "$volume_icon_source" ]; then
            echo -e "${YELLOW}  üé® ‰∏∫ DMG Êñá‰ª∂ËÆæÁΩÆÂõæÊ†á...${NC}"
            # ‰ΩøÁî® RezÔºàÂ¶ÇÊûúÂèØÁî®ÔºâÊàñ DeRez/Rez ‰∏∫ DMG Êñá‰ª∂ËÆæÁΩÆÂõæÊ†á
            if command -v sips &> /dev/null && command -v DeRez &> /dev/null && command -v Rez &> /dev/null; then
                # ÊñπÊ≥ï1Ôºö‰ΩøÁî® macOS ÂºÄÂèëÂ∑•ÂÖ∑
                local icon_rsrc="$(dirname "$dmg_file")/temp_icon.rsrc"
                sips -i "$volume_icon_source" >/dev/null 2>&1 || true
                DeRez -only icns "$volume_icon_source" > "$icon_rsrc" 2>/dev/null || true
                if [ -f "$icon_rsrc" ]; then
                    Rez -append "$icon_rsrc" -o "$dmg_file" >/dev/null 2>&1 || true
                    rm -f "$icon_rsrc"
                fi
                # ËÆæÁΩÆËá™ÂÆö‰πâÂõæÊ†áÊ†áÂøó
                if command -v SetFile &> /dev/null; then
                    SetFile -a C "$dmg_file" 2>/dev/null || true
                fi
            fi
            
            # ÊñπÊ≥ï2Ôºö‰ΩøÁî® osascriptÔºàAppleScriptÔºâ‰Ωú‰∏∫Â§áÁî®ÊñπÊ°à
            if [ ! -f "$dmg_file" ] || ! xattr -l "$dmg_file" 2>/dev/null | grep -q "com.apple.FinderInfo"; then
                osascript - <<EOF >/dev/null 2>&1 || true
tell application "Finder"
    set dmgFile to POSIX file "$dmg_file" as alias
    set iconFile to POSIX file "$volume_icon_source" as alias
    set icon of dmgFile to (read iconFile as ¬´class icns¬ª)
end tell
EOF
            fi
            echo -e "${GREEN}  ‚úÖ DMG Êñá‰ª∂ÂõæÊ†áËÆæÁΩÆÂÆåÊàê${NC}"
        fi
        
        if [ -f "$dmg_file" ]; then
            local dmg_size=$(ls -lh "$dmg_file" | awk '{print $5}')
            echo -e "${GREEN}‚úÖ DMG ÂàõÂª∫ÊàêÂäü: $APP_NAME-$APP_VERSION.dmg ($dmg_size)${NC}"
        else
            echo -e "${RED}‚ùå DMG ÂàõÂª∫Â§±Ë¥•${NC}"
            return 1
        fi
    else
        echo -e "${RED}‚ùå Êú™ÊâæÂà∞ hdiutil Â∑•ÂÖ∑${NC}"
        return 1
    fi
    echo ""
}

# ÂáΩÊï∞ÔºöÂàõÂª∫DMGÂ∏ÉÂ±Ä
create_dmg_layout() {
    local dmg_dir=$1
    
    # ÂàõÂª∫ÈöêËóèÁöÑËÉåÊôØÂõæÁâáÁõÆÂΩïÔºàÂèØÈÄâÔºâ
    # mkdir -p "$dmg_dir/.background"
    
    # ËøôÈáåÂèØ‰ª•Ê∑ªÂä†Ëá™ÂÆö‰πâÁöÑËÉåÊôØÂõæÁâáÂíåÁ™óÂè£Â∏ÉÂ±Ä
    # ÁõÆÂâç‰ΩøÁî®ÈªòËÆ§Â∏ÉÂ±Ä
}

# ÂáΩÊï∞ÔºöÊòæÁ§∫ÊÄªÁªì
show_summary() {
    echo -e "${BLUE}üìä Â∫îÁî®Á®ãÂ∫èÂåÖÁîüÊàêÊÄªÁªì${NC}"
    echo "======================================"
    
    if [ -d "$OUTPUT_DIR" ]; then
        echo -e "${BLUE}üìÅ ËæìÂá∫‰ΩçÁΩÆ: $OUTPUT_DIR${NC}"
        echo ""
        
        # ÂàóÂá∫ÁîüÊàêÁöÑÊñá‰ª∂
        for file in "$OUTPUT_DIR"/*.app; do
            if [ -d "$file" ]; then
                local app_name=$(basename "$file")
                local app_size=$(du -sh "$file" | cut -f1)
                echo -e "${GREEN}‚úÖ $app_name ($app_size)${NC}"
            fi
        done
        
        # ÂàóÂá∫ DMG Êñá‰ª∂
        for file in "$OUTPUT_DIR"/*.dmg; do
            if [ -f "$file" ]; then
                local dmg_name=$(basename "$file")
                local dmg_size=$(ls -lh "$file" | awk '{print $5}')
                echo -e "${GREEN}‚úÖ $dmg_name ($dmg_size)${NC}"
            fi
        done
        
        echo ""
        echo -e "${YELLOW}üí° ‰ΩøÁî®ËØ¥Êòé:${NC}"
        echo -e "${YELLOW}  ‚Ä¢ ÂèåÂáª .app Êñá‰ª∂Áõ¥Êé•ËøêË°åÂ∫îÁî®Á®ãÂ∫è${NC}"
        echo -e "${YELLOW}  ‚Ä¢ ÂèåÂáª .dmg Êñá‰ª∂ÂÆâË£ÖÂ∫îÁî®Á®ãÂ∫è${NC}"
        echo -e "${YELLOW}  ‚Ä¢ È¶ñÊ¨°ËøêË°åÂèØËÉΩÈúÄË¶ÅÂú®Á≥ªÁªüÂÅèÂ•ΩËÆæÁΩÆ‰∏≠ÂÖÅËÆ∏${NC}"
        echo -e "${YELLOW}  ‚Ä¢ Â¶ÇÊûúÂá∫Áé∞ÊùÉÈôêÈóÆÈ¢òÔºåÂè≥ÈîÆÁÇπÂáªÈÄâÊã©"ÊâìÂºÄ"${NC}"
    else
        echo -e "${RED}‚ùå Êú™ÊâæÂà∞ËæìÂá∫Êñá‰ª∂${NC}"
    fi
    echo ""
}

# Ëß£ÊûêÂëΩ‰ª§Ë°åÂèÇÊï∞
CLEAN=false
CREATE_DMG=false
SIGN_APP=false
NOTARIZE_APP=false
SIGNING_IDENTITY=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -c|--clean)
            CLEAN=true
            shift
            ;;
        --create-dmg)
            CREATE_DMG=true
            shift
            ;;
        --sign)
            SIGN_APP=true
            shift
            ;;
        --notarize)
            NOTARIZE_APP=true
            SIGN_APP=true  # ÂÖ¨ËØÅÈúÄË¶ÅÂÖàÁ≠æÂêç
            shift
            ;;
        --identity)
            SIGNING_IDENTITY="$2"
            SIGN_APP=true
            shift 2
            ;;
        *)
            echo -e "${RED}Êú™Áü•ÈÄâÈ°π: $1${NC}"
            show_help
            exit 1
            ;;
    esac
done

# ‰∏ªÁ®ãÂ∫èÂºÄÂßã
START_TIME=$(date +%s)

show_banner
check_prerequisites

if [ "$CLEAN" = true ]; then
    clean_output
fi

# ÂàõÂª∫ËæìÂá∫ÁõÆÂΩï
mkdir -p "$OUTPUT_DIR"

# ÂàõÂª∫Â∫îÁî®Á®ãÂ∫èÂåÖ
if [ -d "$PUBLISH_DIR/osx-arm64" ]; then
    create_app_bundle "osx-arm64"
fi

if [ -d "$PUBLISH_DIR/osx-x64" ]; then
    create_app_bundle "osx-x64"
fi

# ÂàõÂª∫ÈÄöÁî®‰∫åËøõÂà∂Êñá‰ª∂ÔºàÂ¶ÇÊûú‰∏§‰∏™Êû∂ÊûÑÈÉΩÂ≠òÂú®Ôºâ
create_universal_app

# ÂàõÂª∫ DMGÔºàÂ¶ÇÊûúËØ∑Ê±ÇÔºâ
if [ "$CREATE_DMG" = true ]; then
    create_dmg
fi

# ÊòæÁ§∫ÊÄªÁªì
END_TIME=$(date +%s)
DURATION=$((END_TIME - START_TIME))

show_summary

echo -e "${BLUE}‚è±Ô∏è  ÊÄªËÄóÊó∂: ${DURATION}Áßí${NC}"
echo -e "${GREEN}üéâ macOS Â∫îÁî®Á®ãÂ∫èÂåÖÁîüÊàêÂÆåÊàêÔºÅ${NC}"

# Êèê‰æõ‰∏ã‰∏ÄÊ≠•ËØ¥Êòé
echo ""
echo -e "${BLUE}üìù ‰∏ã‰∏ÄÊ≠•Êìç‰ΩúÂª∫ËÆÆ:${NC}"
echo -e "${YELLOW}1. ÊµãËØïÂ∫îÁî®Á®ãÂ∫èÂåÖ: ÂèåÂáª .app Êñá‰ª∂${NC}"
echo -e "${YELLOW}2. Â¶ÇÈúÄÂàÜÂèë: ‰ΩøÁî® --create-dmg ÈÄâÈ°π${NC}"
echo -e "${YELLOW}3. Â¶ÇÈúÄÁ≠æÂêç: ‰ΩøÁî® --sign ÈÄâÈ°π${NC}"
echo -e "${YELLOW}4. È¶ñÊ¨°ËøêË°åÈÅáÂà∞ÂÆâÂÖ®ÊèêÁ§∫Êó∂ÔºåËØ∑Âà∞"Á≥ªÁªüÂÅèÂ•ΩËÆæÁΩÆ > ÂÆâÂÖ®ÊÄß‰∏éÈöêÁßÅ"‰∏≠ÂÖÅËÆ∏${NC}"
